{"createdAt":"2025-06-18T14:49:28.454Z","updatedAt":"2025-06-19T16:01:18.254Z","id":"rt2a1FyC8N4XuYML","name":"[LEGACY]test-manager","active":false,"isArchived":false,"nodes":[{"parameters":{"content":"# Test credentials\n\n## Exercice 1: Débugguer le workflow de validation de postgres\n\n1. Assurez vous que la requête http est bien récupérée par le workflow tests/credentials/postgres\n2. Assurez-vous que tous les inputs attendus sont correctement envoyés: Le query parameter ainsi que le body doivent être correctement parsé par le workflow de test postgres\n3. Assurez-vous que les inputs parsés sont correctement utiliser dans la requête SQL\n4. Assurez-vous que la réponse du webhook renvoie le json attendus en cas d'erreur ou de succés\n5. Lors de la validation de l'email dans le workflow http://localhost:5677/workflow/flN6dDgjQHyORqXR, on va définir l'email de validation dans ce workflow et le faire passer en tant qu'argument. Il faut donc modifier la partie après le router, dans la validation postgres, pour parser cet argument et l'utiliser en tant que variable dynamique dans la validation.\nOn comprend ici que le subworkflow accepte de plus en plus de paramètre ce qui permet d'écrire plus de test en amont\n","height":600,"width":1140,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[60,-1340],"id":"b69720a2-ff7c-48dd-9057-dc0a781f726a","name":"Sticky Note"},{"parameters":{"assignments":{"assignments":[{"id":"445f06a5-dd9b-4722-8504-33ee31ac103c","name":"test_type","value":"database","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-780,-400],"id":"1bd4ab2b-bf44-4f03-a14a-c35e6cc751f6","name":"test_type"},{"parameters":{"errorMessage":"=test_type: {{ $json.test_type }} is not valid."},"type":"n8n-nodes-base.stopAndError","typeVersion":1,"position":[-340,-200],"id":"234ff302-a7e9-476a-8372-79aaf748f7d3","name":"TestTypeNotValid"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"a118f931-2ca8-470d-a6ac-64feb32e2746","leftValue":"={{ $json.test_type }}","rightValue":"=database","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-560,-400],"id":"9ffdec60-7158-44ca-873a-34cf277c2cfd","name":"CheckTestType"},{"parameters":{"content":"# Router de test\n\n## Trigger node\n\n## test_type == database\n\nLe node test_type est utilisé pour déclencher la bonne suite de test grace au \"if\".\nPour commencer on souhaite valider la création et la connexion à nos deux database.\n\n\n\nPour cela on va utiliser le test_type \"database\" qui va appeler notre suite de tests stockée:\n1. Dams le dossier tests\n2. Dans le sous dossier /databases/\n\nDans ce dossier, un premier workflow est proposé: credentials.\n\nIl faut méticuleusement les compléter afin que leur réponse en cas de succès ou d'erreur soit correctement recue et comprise dans ce workflo principale ","height":1080,"width":680,"color":7},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1100,-1340],"id":"242fa102-ac87-4d14-9028-cf70c8b0c561","name":"Sticky Note2"},{"parameters":{"content":"# Database test router\n\nIci: On peut éventuellement subdiviser nos test à mesure que notre application grandit.\n\nPour le moment restons simples: Un seul database_type possible: credentials. C'est pourquoi ici la valeur est hardcodée. En revanche, on pourra imaginer que cette valeur est récupérer en amont et utiliser pour router les tests\n\nOn doit alors déclencher les tests de credentials de:\n1. postgres\n2. supabase","height":1080,"width":440,"color":7},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-400,-1340],"id":"d49c15b0-5398-4477-9e97-917858e07de7","name":"Sticky Note3"},{"parameters":{"assignments":{"assignments":[{"id":"36f3925c-b7f7-4653-bc6c-c8a56bad847f","name":"credential_name","value":"postgres","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[140,-900],"id":"246e3619-510f-4cbd-9b07-a7094196bcfe","name":"postgres_data"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-1020,-400],"id":"d36ab815-44f7-4f1a-ae2c-c21c46f3831a","name":"TriggerTestTypeDatabase"},{"parameters":{"errorMessage":"={{ $json.error }}"},"type":"n8n-nodes-base.stopAndError","typeVersion":1,"position":[800,-780],"id":"caa681b1-ed46-4fd5-9e31-d377cc22addc","name":"Stop and Error"},{"parameters":{"rules":{"values":[{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"leftValue":"={{ $json.database_test_type }}","rightValue":"credentials","operator":{"type":"string","operation":"equals"},"id":"911452c4-3b2a-4bc2-a2e5-e9589c06b387"}],"combinator":"and"}}]},"options":{"fallbackOutput":"extra"}},"type":"n8n-nodes-base.switch","typeVersion":3.2,"position":[-120,-760],"id":"149d12f6-e331-4743-baf6-9db5c55fd866","name":"DatabaseTestRouter"},{"parameters":{"assignments":{"assignments":[{"id":"36f3925c-b7f7-4653-bc6c-c8a56bad847f","name":"credential_name","value":"supabase","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[120,-580],"id":"22dccb05-4f73-4ee8-a453-bc227c1975fe","name":"supabase_data2","disabled":true},{"parameters":{"method":"POST","url":"=http://localhost:5677/webhook/api/v1/tests/databases/credentials","sendQuery":true,"queryParameters":{"parameters":[{}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"database_test_name","value":"="},{"name":"credential_name","value":"={{ $json.credential_name }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[500,-900],"id":"31185854-1b6a-4c75-ae1a-3caca722294d","name":"tests/databases/credentials","onError":"continueErrorOutput"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"f1fc98df-c950-4db0-a32a-aa56913974e7","leftValue":"={{ $json.test_status }}","rightValue":"={{ $json.test_status }}","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[800,-940],"id":"b1be458f-ed11-4d02-823e-0e1c91d0cf75","name":"If"},{"parameters":{"errorMessage":"={{ $json.error }}"},"type":"n8n-nodes-base.stopAndError","typeVersion":1,"position":[1040,-880],"id":"5bda315c-3ce3-4fae-9ce5-54c65e32a4c1","name":"Stop and Error1"},{"parameters":{"content":"# Pour aller plus loin\n\n- Vous pouvez ouvrir ce manager en mode Webhook\n- Au lieu du trigger node vous aurez un webhook et il faudra parser la requête\n- Selon les arguments: On route au CheckTestType\n- On peut encore améliorer le DatabaseTestRouter et imaginer que tous les SetValue nodes sont enlevés, et que la requêtes contient toutes les informations nécessaires pour déclencher les bons workflows avec les bon paramètres","height":220,"width":2300,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1100,-240],"id":"2b4bcf99-fecc-4894-93ed-f71c61763297","name":"Sticky Note4"},{"parameters":{"content":"\n## Exercice 2: Implémenter un workflow de test minimalist qui vérifie la connexion à supabase\n\nNote: Pas besoin d'un nouveau noeud HttpRequest, seul l'argument envoyé change\n","height":460,"width":1140,"color":5},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[60,-720],"id":"886f7503-b23a-43e6-ac8c-d107b9ea4f53","name":"Sticky Note5"},{"parameters":{"content":"# Pour aller plus loin\n\n- Remplacer les webhook par des triggers de sub-workflow","height":220,"width":2300,"color":3},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-1100,0],"id":"0e1ca849-118c-4ca7-bfe4-9cfc23b1868b","name":"Sticky Note6"},{"parameters":{"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-580,40],"id":"493b0af7-36e7-474f-9ebb-f40ac9d2c608","name":"Execute Workflow","disabled":true},{"parameters":{"assignments":{"assignments":[{"id":"445f06a5-dd9b-4722-8504-33ee31ac103c","name":"database_test_type","value":"=credentials","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-320,-760],"id":"5ceb63aa-ee5a-48f7-b500-b6a2974c4484","name":"database_test_type"}],"connections":{"test_type":{"main":[[{"node":"CheckTestType","type":"main","index":0}]]},"CheckTestType":{"main":[[{"node":"database_test_type","type":"main","index":0}],[{"node":"TestTypeNotValid","type":"main","index":0}]]},"postgres_data":{"main":[[{"node":"tests/databases/credentials","type":"main","index":0}]]},"TriggerTestTypeDatabase":{"main":[[{"node":"test_type","type":"main","index":0}]]},"DatabaseTestRouter":{"main":[[{"node":"postgres_data","type":"main","index":0},{"node":"supabase_data2","type":"main","index":0}]]},"supabase_data2":{"main":[[]]},"tests/databases/credentials":{"main":[[{"node":"If","type":"main","index":0}],[{"node":"Stop and Error","type":"main","index":0}]]},"If":{"main":[[],[{"node":"Stop and Error1","type":"main","index":0}]]},"database_test_type":{"main":[[{"node":"DatabaseTestRouter","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"331ff2d5-c407-4036-a6f7-58a054a12157","triggerCount":0,"tags":[]}